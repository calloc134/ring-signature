# GitHub Actions: Release Build and Upload

# オプショナルですが、ワークフロー名を定義すると分かりやすくなります
name: Release Build and Upload

on:
  release:
    types: [created] # GitHub Release 作成時にトリガー

jobs:
  publish:
    name: Build and Release (${{ matrix.target }})
    permissions:
      contents: write # Release への書き込み権限
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows x86_64 (MSVC)
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # Linux x86_64 (GNU)
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          # macOS x86_64 (Intel)
          - target: x86_64-apple-darwin
            os: macos-latest
          # macOS aarch64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest

    runs-on: ${{ matrix.os }} # ジョブが実行されるOS

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pkg-config \
            nettle-dev \
            libglib2.0-dev \
            libgtk-3-dev \
            libjavascriptcoregtk-4.1-dev \
            libwebkit2gtk-4.1-dev \
            libsoup-3.0-dev \
            clang \
            llvm \
            libssl-dev \
            libpq-dev


   # macOS x86_64 用依存インストール
      - name: Install system dependencies on macOS (Intel)
        if: runner.os == 'macOS' && matrix.target == 'x86_64-apple-darwin'  # 条件付き実行&#8203;:contentReference[oaicite:9]{index=9}
        run: |
          brew update
          brew install nettle      # Nettle ライブラリ&#8203;:contentReference[oaicite:10]{index=10}
          brew install pkgconf     # pkg-config 互換ツール&#8203;:contentReference[oaicite:11]{index=11}


      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Build common library
        run: |
          cargo build --release --target ${{ matrix.target }} -p common

      - name: Build & Release Tauri App
        id: tauri # このステップの出力を後で参照するためのID
        uses: tauri-apps/tauri-action@v0.5.20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Release作成やアップロードに必要なトークン
        with:
          projectPath: client-tauri # Tauriプロジェクトのパス
          args: --target ${{ matrix.target }} --release # tauri build に渡す引数

      - name: Upload common artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.tauri.outputs.upload_url }}
          asset_path: target/${{ matrix.target }}/release/libcommon.rlib
          asset_name: libcommon-${{ matrix.target }}.rlib
          asset_content_type: application/octet-stream
